name: cnvetti
version: 0.1.0
about: Robust, efficient, and versatile clinical CNV calling from HTS data
author: Manuel Holtgrewe <manuel.holtgrewe@bihealth.de>
after_help: >
  The "quick-*" commands are very easy to use it's recommended to get started using them before
  you look at the more complex pre-defined workflows or the low-level primitives accessible in
  the "cmd" command.

  See the tool's web site https://github.com/bihealth/cnvetti for more information, getting
  started information and detailed manual.

settings:
- SubcommandRequiredElseHelp
- ColorAuto
- DeriveDisplayOrder
- GlobalVersion
- StrictUtf8
- UnifiedHelpMessage

args:
- verbose:
    long: verbose
    short: v
    multiple: true
    takes_value: false
    global: true
    help: Increase verbosity
- quiet:
    long: quiet
    short: q
    multiple: true
    takes_value: false
    global: true
    help: Decrease verbosity
- io_threads:
    long: io-threads
    short: t
    takes_value: true
    value_name: COUNT
    global: true
    default_value: '0'
    help: Number of additional threads to use for (de)compression in I/O.

subcommands:
# Sub command: cmd ================================================================================
- cmd:
    about: Low-level access to the CNVetti primitives.
    after_help: >
      This section of commands provides access to the individual, atomic steps of CNVetti.  You
      can use them to build your own pipelines and themselves, they are used for implementing
      the shortcut commands.
    settings:
    - SubcommandRequiredElseHelp
    - ColorAuto
    - DeriveDisplayOrder
    - GlobalVersion
    - StrictUtf8
    - UnifiedHelpMessage
    subcommands:
    # Sub command: cmd coverage -------------------------------------------------------------------
    - coverage:
        about: Record coverage from input BAM file
        after_help: >
          This command takes a BAM file with aligned reads from a WGS or targeted sequencing
          experiment and produces a BCF file that describes read depth.  The depth can be either
          measured in base-wise coverage or fragment count.  It can be generated for genome bins
          or for target regions.  The command will generate raw read depth information as well
          as length-normalized read-depth information.  In the case of targeted sequencing
          and genomic bins (aka "off-target reads"), read piles from target or off-target
          enriched regions can be masked.
        args:
        # Input- and output-related arguments .....................................................
        - input:
            long: input
            takes_value: true
            required: true
            value_name: INPUT.bam
            help: Path to BAI-indexed BAM file.
        - output:
            long: output
            takes_value: true
            required: true
            value_name: OUT.bcf
            help: >
              Path to output BCF file with the coverage information.  This will also write a
              corresponding `.csi` file.
        - output_masked_bed:
            long: output-masked-bed
            takes_value: true
            value_name: MSK.bed
            help: Path to BED file with masked regions.
        - reference:
            long: reference
            takes_value: true
            required: false
            value_name: REF.fa
            help: >
              Path to FAI-indexed reference FASTA file used for read alignment.  This is only
              required if GC-correction is to be performed downstream which is most likely the
              case except for on-target WES processing.
        - genome_region:
            long: genome-region
            takes_value: true
            value_name: REGION
            help: Optional genome region to limit the processing to.
        # Counting-related arguments ..............................................................
        - contig_regex:
            long: contig-regex
            takes_value: true
            default_value: '^(chr)?\d\d?$'
            value_name: REGEX
            help: Regular expression for contigs considered for coverage.
        - blacklist_bed:
            long: blacklist-bed
            multiple: false
            takes_value: true
            value_name: MASKED.bed.gz
            help: Path to tabix-indexed blacklist BED file.
        - count_kind:
            long: count-kind
            takes_value: true
            required: true
            value_name: COUNT
            possible_values:
            - Coverage
            - Fragments
            help: >
              Whether to consider alignment coverage or number of aligning fragments.  In the
              cases of WES data and low-coverage WGS data, counting fragment is recommended.
              Considering coverage is only recommended in the case of high-coverage WGS data.
        - min_mapq:
            long: min-mapq
            takes_value: true
            default_value: '0'
            value_name: MIN_MAPQ
            help: >
              Alignments with alignment quality less than `MIN_MAPQ` will be ignored.
        - min_unclipped:
            long: min-unclipped
            takes_value: true
            default_value: '0.6'
            value_name: MIN_UNCLIPPED
            help: >
              At least `MIN_UNCLIPPED` percent of the read have to be unclipped
              for it to be counted.
        - min_window_remaining:
            long: min-window-remaining
            takes_value: true
            default_value: '0.5'
            value_name: FRAC
            help: Minimal fraction of window that must remain after masking (e.g., for piles).
        - min_raw_coverage:
            long: min-raw-coverage
            takes_value: true
            default_value: '10'
            value_name: COUNT
            help: Target regions with lower coverage are ignored.
        # Binning- and target-related arguments (WGS or off-target WES) ...........................
        - window_length:
            long: window-length
            takes_value: true
            value_name: LENGTH
            help: >
              Length of window for binning on coverage computation.  Required unless
            conflicts_with:
            - targets_bed
            - wis_model_bcf
        - targets_bed:
            long: targets-bed
            takes_value: true
            value_name: TGT.bed.gz
            help: Path to tabix-indexed BED file with intervals of the targets of WES.
            conflicts_with:
            - window_length
            - wis_model_bcf
        - wis_model_bcf:
            long: wis-model-bcf
            takes_value: true
            value_name: MODEL.bcf
            help: Path to WIS model BCF file.
            conflicts_with: window_length
            conflicts_with:
            - window_length
            - targets_bed
        # Pile-masking (off-target WES only) ......................................................
        - mask_piles:
            long: mask-piles
            takes_value: false
            help: >
                Enable pile-masking algorithm using the other `--pile-*` arguments.  See the manual
                for details.
        - mask_piles_fdr:
            long: mask-piles-fdr
            takes_value: true
            default_value: '0.001'
            value_name: FDR
            help: Compute pile depth threshold to get FDR less than or equal to this value.
        - pile_max_gap:
            long: pile-max-gap
            takes_value: true
            default_value: '20'
            value_name: VAL
            help: Merge intervals for piles if distance is <= `VAL`.
        - pile_mask_window_size:  # TODO: remove?
            long: pile-mask-window-size
            takes_value: true
            default_value: '1'
            value_name: SIZE
            help: >
              Mask windows of length `SIZE` when a pile occurs.  Set to `1` to do no window-based
              masking.
    # Sub command: cmd normalize ------------------------------------------------------------------
    - normalize:
        about: Normalize coverage on a per-sample level
        settings:
        - DeriveDisplayOrder
        - GlobalVersion
        - UnifiedHelpMessage
        - ColorAuto
        after_help: >
          This command takes the coverage BAM file generated by `cmd coverage` and performs
          normalization on the whole-sample level.
        args:
        # Input/Output File Arguments ---------------------------------------------
        - input:
            long: input
            short: i
            multiple: false
            takes_value: true
            required: true
            value_name: INPUT.bcf
            help: Path to indexed input BCF or VCF file from `cnvetti cmd coverage` output.
        - output:
            long: output
            short: o
            takes_value: true
            required: true
            value_name: OUT.bcf
            help: Path to output BCF file (will also write .csi file)
        # Filtration-Related Arguments --------------------------------------------
        - min_gc_window_count:
            long: min-gc-window-count
            takes_value: true
            default_value: '100'
            value_name: COUNT
            help: >
                Flag windows of GC content with an occurence of less than `COUNT`
                as `INFO/FEW_GCWINDOWS`.
        # Statistics-Related Arguments --------------------------------------------
        - contig_regex:
            long: contig-regex
            takes_value: true
            default_value: '^(chr)?\d\d?$'
            value_name: 'regex'
            help: Regular expression for contigs taking part in statistics.
        - normalization:
            long: normalization
            takes_value: true
            required: true
            value_name: TYPE
            possible_values:
            - TotalCovSum
            - MedianGcBinned
            help: The method to use for read count/coverage normalization.
    # Sub command: cmd filter ---------------------------------------------------------------------
    - filter:
        about: Filter coverage information
        after_help: >
          This command allows the filtration of coverage BCF files.
        settings:
        - DeriveDisplayOrder
        - GlobalVersion
        - UnifiedHelpMessage
        - ColorAuto
    # Sub command: cmd merge-cov ------------------------------------------------------------------
    - merge-cov:
        about: Merge the coverage information for multiple samples
        after_help: >
          This command merges multiple coverage BCF files with non-overlapping sample sets
          into one multi-sample coverage BCF file.

          Please note that this is only appropriate for merging coverage BCF files.  In case
          you have any problems with this command, try using `bcftools merge -m id` instead
          of this cnvetti sub command.
        settings:
        - DeriveDisplayOrder
        - GlobalVersion
        - UnifiedHelpMessage
        - ColorAuto
        args:
        # Input/Output File Arguments -------------------------------------------------------------
        - input:
            takes_value: true
            multiple: true
            required: true
            value_name: INPUT.bcf
            help: Path to indexed input BCF or VCF file from `cnvetti cmd coverage` output.
        - output:
            long: output
            short: o
            takes_value: true
            required: true
            value_name: OUT.bcf
            help: Path to output BCF file (will also write .csi file)
    # Sub command: cmd de-bias --------------------------------------------------------------------
    - de-bias:
        about: Try to remove bias in the data
        after_help: >
          This command takes a multi-sample coverage BCF file and attempts to remove region-wise
          bias in the data using PCA.  This step is designed for processing targeted sequencing
          on-target read data and is to be called on the samples to be analyzed, possibly
          with equally processed background samples.  This step generates another coverage
          BCF file with the same number of samples and regions as the input file.
        settings:
        - DeriveDisplayOrder
        - GlobalVersion
        - UnifiedHelpMessage
        - ColorAuto
    # Sub command: cmd build-model-pool -----------------------------------------------------------
    - build-model-pool:
        about: Build model based on pooling a reference panel.
        after_help: >
          This command takes a multi-sample coverage BCF file and computes per-region statistics
          across the cohort.  The output of this step is a BCF without sample information that
          describes the coverage distribution for each region.  This file can be used for
          annotation and filtering coverage BCF files (e.g., unreliable regions with a large
          normalized coverage IQR across a cohort).
        settings:
        - DeriveDisplayOrder
        - GlobalVersion
        - UnifiedHelpMessage
        - ColorAuto
        args:
        - input:
            multiple: false
            takes_value: true
            required: true
            value_name: MULTICOV.bcf
            help: Path to indexed BCF file that was merged from multiple coverage files.
        - output:
            long: output
            short: o
            takes_value: true
            required: true
            value_name: OUT.bcf
            help: Path to output normalized counts BCF file.
    # Sub command: cmd build-model-wis ------------------------------------------------------------
    - build-model-wis:
        about: Build within-sample model.
        after_help: >
          This command takes a multi-sample coverage file and computes a model for the analysis
          using the WISExome approach by Straver et al. (2018).  The result is a BCF file without
          any per-sample annotation that is used as the reference BCF file for input to the
          `cmd mod-coverage` step.
        settings:
        - DeriveDisplayOrder
        - GlobalVersion
        - UnifiedHelpMessage
        - ColorAuto
        args:
        - input:
            long: input
            short: i
            multiple: false
            takes_value: true
            required: true
            value_name: INPUT.bcf
            help: Path to indexed input BCF file from wise count.
        - output:
            long: output
            short: o
            takes_value: true
            required: true
            value_name: OUT.bcf
            help: Path to output normalized counts BCF file.
        - num_threads:
            long: num-threads
            takes_value: true
            required: false
            value_name: THREADS
            default_value: '0'
            help: Number of threads to use, '0' to disable multi-threading.
        - filter_z_score:
            long: filter-z-score
            takes_value: true
            required: false
            value_name: MULT
            default_value: '5.64'
            help: 'Threshold on z score (default: 5.64).'
        - filter_rel:
            long: filter-rel
            takes_value: true
            required: false
            value_name: REL
            default_value: '0.35'
            help: 'Relative threshold'
        - min_ref_targets:
            long: min-ref-targets
            takes_value: true
            required: false
            value_name: COUNT
            default_value: '10'
            help: 'Minimal number of targets before filtering (default: 10).'
        - max_ref_targets:
            long: max-ref-targets
            takes_value: true
            required: false
            value_name: COUNT
            default_value: '100'
            help: Number of targets to start out with.
        - max_samples_reliable:
            long: max-samples-reliable
            takes_value: true
            required: false
            value_name: COUNT
            default_value: '4'
            help: >
              If a CNV is called for more than this many reference samples
              then ignore.
        - min_samples_min_fragments:
            long: min-samples-min-fragments
            takes_value: true
            required: false
            default_value: '10'
            value_name: FRAGMENTS
            help: >
              Minimal number of samples that must have a number of fragments
              above `--min-fragments` from `normalize`.
    # Sub command: cmd mod-coverage ---------------------------------------------------------------
    - mod-coverage:
        about: Compute coverage with information from a model.
        after_help: >
          This command takes a coverage BCF file as created by `cmd coverage` and a model BCF
          file generated by one of the `cmd build-model-*` commands.  It then generates a
          coverage BCF file that expresses coverage incorporating information from the model
          (i.e., coverage will be expressed relative to the model and be annotated with
          reliability information from the model).
        settings:
        - DeriveDisplayOrder
        - GlobalVersion
        - UnifiedHelpMessage
        - ColorAuto
        args:
        - input:
            multiple: false
            takes_value: true
            required: true
            value_name: INPUT.bcf
            help: Path to indexed BCF file containing normalized counts.
        - input_wis_model:
            long: input-wis-model
            multiple: false
            takes_value: true
            required: true
            value_name: MODEL.bcf
            help: Path to BCF file with the within-sample model.
        - input_pool_model:
            long: input-pool-model
            multiple: false
            takes_value: true
            required: true
            value_name: MODEL.bcf
            help: Path to BCF file with the pool-of-reference model.
        - output:
            long: output
            short: o
            takes_value: true
            required: true
            value_name: OUT.bcf
            help: Path to output normalized counts BCF file.
        groups:
        - model:
            required: true
            args:
            - input_wis_model
            - input_pool_model
    # Sub command: cmd discover -------------------------------------------------------------------
    - discover:
        about: Perform CNV discovery/calling.
        after_help: >
          This command takes a coverage BCF file.  This can be the output of `cmd normalize` in
          the case of data from genomics bins.  More often, it will be the output of
          `cmd mod-coverage` to take information from a larger cohort or the within-sample model
          into consideration.  The output will be a call BCF file that contains copy number
          call information inferred from the coverage BCF file.
        settings:
        - DeriveDisplayOrder
        - GlobalVersion
        - UnifiedHelpMessage
        - ColorAuto
    # Sub command: cmd genotype -------------------------------------------------------------------
    - genotype:
        about: Perform CNV genotyping.
        after_help: >
          This command takes both a call BCF file, a coverage BCF file, and optionally the
          original alignment BAM file (only sensible for deep WGS data) and performs genotyping
          of the CNV calls from the call BCF file using the coverage information in the coverage
          BCF file and the raw read information.
        settings:
        - DeriveDisplayOrder
        - GlobalVersion
        - UnifiedHelpMessage
        - ColorAuto

# Sub command: quick ==============================================================================
- quick:
    about: Easy-to-use shortcuts for command and important use cases.
    settings:
    - SubcommandRequiredElseHelp
    - ColorAuto
    - DeriveDisplayOrder
    - GlobalVersion
    - StrictUtf8
    - UnifiedHelpMessage
    subcommands:
    # Sub command: quick wis-build-model ----------------------------------------------------------
    - wis-build-model:
        about: Build an within-sample model for targeted sequencing CNV calling.
        after_help: >
          This call takes a list of BAM files that are aligned to the same reference and are
          ideally unrelated to reduce biases and skews in the resulting model.  Further, a tabix-
          indexed BED file with target regions is required.

          The command writes a BCF file that defines a list of reference target regions for each
          of the input target regions.

          The processing of the input files happens in parallel as well as the computation of the
          distance matrix when building the model.
        settings:
        - ArgRequiredElseHelp
        - DeriveDisplayOrder
        - GlobalVersion
        - UnifiedHelpMessage
        - ColorAuto
        args:
        # TODO: allow more configuration options from the more fine-granular `cmd *` commands.
        - input:
            multiple: false
            takes_value: true
            required: true
            multiple: true
            value_name: INPUT.bam
            help: Path to indexed input BAM file.
        - targets_bed:
            long: targets-bed
            takes_value: true
            value_name: TGT.bed.gz
            required: true
            help: Path to tabix-indexed BED file with intervals of the targets of WES.
        - output:
            long: output
            short: o
            takes_value: true
            required: true
            value_name: OUT.bcf
            help: Path to output model BCF file.
        - output_cov:
            long: output-cov
            takes_value: true
            value_name: OUT.cov.bcf
            help: Path to output per-sample coverage BCF file.
        - num_threads:
            long: num-threads
            takes_value: true
            required: false
            value_name: THREADS
            default_value: '1'
            help: Number of threads to use.
    # Sub command: quick wis-call -----------------------------------------------------------------
    - wis-call:
        about: Perform CNV calling on germline or unmatched tumor using within-sample approach.
        after_help: >
          This shortcut takes as the input a BCF file with the within-sample model from
          `cnvetti quick wis-build-model` and a BAM file of one germline or unmached tumor sample.

          It will then generate on-target CNV analysis and perform CNV variant calling using the
          resulting on-target coverage result.
        settings:
        - ArgRequiredElseHelp
        - DeriveDisplayOrder
        - GlobalVersion
        - UnifiedHelpMessage
        - ColorAuto
        args:
        - input:
            multiple: false
            takes_value: true
            required: true
            value_name: INPUT.bam
            help: Path to indexed input BAM file.
        - input_model:
            long: input-model
            multiple: false
            takes_value: true
            required: true
            value_name: MODEL.bcf
            help: Path to BCF file with the WIS model.
        - output:
            long: output
            short: o
            takes_value: true
            required: true
            value_name: OUT.bcf
            help: Path to output CNV call file.
        - output_targets:
            long: output-targets
            takes_value: true
            required: false
            value_name: OUT.tgts.bcf
            help: >
              Optional path to BCF file with per-target coverage information (similar level of
              information to probes in arrays).
        - output_igv_cov:
            long: output-igv-cov
            takes_value: true
            required: false
            value_name: COV.igv
            help: Optional path to IGV file to write (linear relative) coverage to.
        - output_igv_cov2:
            long: output-igv-cov2
            takes_value: true
            required: false
            value_name: COV2.igv
            help: Optional path to IGV file to write log2-scaled coverage to.
    # Sub command: quick wis_call_matched ---------------------------------------------------------
    - wis-call-matched:
        about: Perform CNV calling on one matched tumor sample using the within-sample approach.
        after_help: >
          This shortcut takes as the input a BCF file with the within-sample model from
          `cnvetti quick wis-build-model` and each one tumor and a matched normal BAM file.

          It will then generate on-target CNV analysis of the matched tumor/normal pair and
          generate a CNV call BCF file.
        settings:
        - ArgRequiredElseHelp
        - DeriveDisplayOrder
        - GlobalVersion
        - UnifiedHelpMessage
        - ColorAuto

# Sub command: visualize ==========================================================================
- visualize:
    about: Visualization of coverage information (on-target, off-target, and genome-wide bins).
    after_help: >
      This visualization command allows to extract coverage information tracks in IGV format
      from (target) coverage BCF files.  These files can then be convered into TDF format
      using `igvtools totdf FILE GENOME`.
    settings:
    - SubcommandRequiredElseHelp
    - ColorAuto
    - DeriveDisplayOrder
    - GlobalVersion
    - StrictUtf8
    - UnifiedHelpMessage
    subcommands:
    # Sub command: visualize cov-to-igv -----------------------------------------------------------
    - cov-to-igv:
        about: Build `.igv` visualization tracks from coverage BCF files.
        after_help: >
          This visualization command allows to extract coverage information tracks in IGV format
          from (target) coverage BCF files.  These files can then be convered into TDF format
          using `igvtools totdf FILE GENOME`.
        settings:
        - ArgRequiredElseHelp
        - DeriveDisplayOrder
        - GlobalVersion
        - UnifiedHelpMessage
        - ColorAuto
        args:
        - input:
            multiple: false
            takes_value: true
            required: true
            value_name: COV.bcf
            help: Path to indexed input BCF file.
        - output_igv_cov:
            long: output-igv-cov
            multiple: false
            takes_value: true
            required: true
            value_name: OUT.cov.igv
            help: Path to IGV coverage file writing out the raw coverage signal.
        - output_igv_cov2:
            long: output-igv-cov2
            multiple: false
            takes_value: true
            required: true
            value_name: OUT.cov2.igv
            help: Path to IGV coverage file writing out the log2-transformed coverage signal.

# Sub command: annotate ===========================================================================
- annotate:
    about: Perform annotate called CNV result BCF files
    settings:
    - SubcommandRequiredElseHelp
    - ColorAuto
    - DeriveDisplayOrder
    - GlobalVersion
    - StrictUtf8
    - UnifiedHelpMessage
