name: cnvetti
version: 0.1.0
about: CNV calling for the masses
author: Manuel Holtgrewe <manuel.holtgrewe@bihealth.de>

settings:
- SubcommandRequiredElseHelp
- GlobalVersion
- UnifiedHelpMessage
- ColorAuto

args:
- verbose:
    long: verbose
    short: v
    multiple: true
    takes_value: false
    global: true
    help: Increase verbosity
- quiet:
    long: quiet
    short: q
    multiple: true
    takes_value: false
    global: true
    help: Decrease verbosity

# TODO: add option to select I/O threads

subcommands:
# Sub Command: coverage =======================================================
- coverage:
    about: Collect per-sample coverage information
    args:
    # Input/Output File Arguments ---------------------------------------------
    - reference:
        long: reference
        short: r
        takes_value: true
        required: true
        value_name: REF.fa
        help: Path to FAI-indexed reference FASTA file used for read alignment.
    - input:
        long: input
        short: i
        multiple: true
        takes_value: true
        required: true
        min_values: 1
        value_name: INPUT.bam
        help: Path to BAI-indexed BAM file(s).
    - output:
        long: output
        short: o
        takes_value: true
        required: true
        value_name: OUT.bcf
        help: >
            Path to output BCF file (cnvetti coverage will also write .csi
            and .stats.json file).
    - genome_regions:
        long: genome-region
        multiple: true
        takes_value: true
        value_name: REGION
        help: Genome region(s) to consider, e.g., 1:1,100,000-1,120,000
    - mapability_bed:
        long: mapability-bed
        multiple: false
        takes_value: true
        value_name: MAP.bed.gz
        help: Path to bgziped and tabix-indexed mapability BED file.

    # Preset-Selecting Arguments ----------------------------------------------
    - preset:
        long: preset
        takes_value: true
        value_name: PRESET
        possible_values:
        - Wgs
        - WesOffTarget
        - WesOnTarget
        help: Select one of the pre-defined preset modes.

    # Binning-Related Arguments -----------------------------------------------
    - window_length:
        long: window-length
        short: w
        takes_value: true
        default_value: '500'
        value_name: LENGTH
        help: >
            Length of window for initial coverage computation.  When counting
            on target regions then targets greater than two times `LENGTH`
            will be split into (overlapping) windows of length `LENGTH`.
    - window_overlap:
        long: window-overlap
        takes_value: true
        default_value: '0'
        value_name: OVL
        help: Additional overlap for windows.

    # Pile-Finding and Masking Arguments --------------------------------------
    - mask_piles:
        long: mask-piles
        takes_value: false
        help: >
            Enable masking of "piles", that is intervals that are (1)
            contiguously covered (allowing for `--pile-max-gap` of gaps), and
            (2) at least at one position the depth is >= `--pile-min-depth`.
            In this case, any alignment overlapping with the pile will be
            ignored.
    - pile_min_depth:
        long: pile-min-depth
        takes_value: true
        default_value: '3'
        value_name: DEPTH
        help: Piles with a depth of >= `DEPTH` will be masked.
    - pile_max_gap:
        long: pile-max-gap
        takes_value: true
        default_value: '5'
        value_name: VAL
        help: Merge intervals for piles if distance is <= `VAL`.
    - pile_mask_window_size:
        long: pile-mask-window-size
        takes_value: true
        default_value: '500'
        value_name: SIZE
        help: >
            Mask windows of length `SIZE` when a pile occurs.  Set to `1` to
            do no window-based masking.

    # Counting-Related Arguments ----------------------------------------------
    - count_kind:
        long: count-kind
        takes_value: true
        default_value: Coverage
        value_name: COUNT
        possible_values:
        - Coverage
        - Alignments
        help: >
            Whether to consider coverage or alignments only in the alignment.
            When counting alignments, only the first read's alignment of a
            pair will be counted (it is recommended to combine this with
            `--skip-discordant`).
    - min_mapq:
        long: min-mapq
        takes_value: true
        default_value: '0'
        value_name: MIN_MAPQ
        help: >
            Alignments with alignment quality less than `MIN_MAPQ` will be
            ignored.
    - min_unclipped:
        long: min-unclipped
        takes_value: true
        default_value: '0.6'
        value_name: MIN_UNCLIPPED
        help: >
            At least `MIN_UNCLIPPED` percent of the read have to be unclipped
            for it to be counted.
    - skip_discordant:
        long: skip-discordant
        help: >
            If set, discordant alignments (not both reads aligned or not
            inwards-pointing) will be skipped.

# Sub Command: coverage =======================================================
- normalize:
    about: Normalize per-sample coverage information
    args:
    # Input/Output File Arguments ---------------------------------------------
    - input:
        long: input
        short: i
        multiple: false
        takes_value: true
        required: true
        value_name: INPUT.bcf
        help: >
            Path to indexed input BCF or VCF file resulting from `cnvetti
            coverage`.  Note that also the corresonding .stats.json file has
            to exist.
    - output:
        long: output
        short: o
        takes_value: true
        required: true
        value_name: OUT.bcf
        help: Path to output BCF file (will also write .csi file)

    # Filtration-Related Arguments --------------------------------------------
    - min_gc_window_count:
        long: min-gc-window-count
        takes_value: true
        default_value: '100'
        value_name: COUNT
        help: >
            Flag windows of GC content with an occurence of less than `COUNT`
            as `INFO/FEW_GCWINDOWS`.

    # Statistics-Related Arguments --------------------------------------------
    - count_kind:
        long: count-kind
        takes_value: true
        default_value: Coverage
        value_name: COUNT
        possible_values:
        - Coverage
        - Alignments
        help: Whether to consider coverage or read count statistics.

    # Preset-Selecting Arguments ----------------------------------------------
    - preset:
        long: preset
        takes_value: true
        value_name: PRESET
        possible_values:
        - Wgs
        - WesOffTarget
        - WesOnTarget
        help: Select one of the pre-defined preset modes.
