//! Genotyping from segmentation BCF and optional a CNV call file.

extern crate bio;
extern crate chrono;
#[macro_use]
extern crate error_chain;
extern crate statrs;

extern crate clap;

extern crate ordered_float;
extern crate quantiles;

#[macro_use]
extern crate slog;
use slog::Logger;

extern crate strum;
#[macro_use]
extern crate strum_macros;

extern crate rust_htslib;
extern crate rust_segment;
extern crate separator;
extern crate shlex;

extern crate lib_shared;
use lib_shared::bcf_utils;

mod gt_xhmm;

mod options;
pub use options::*;

/// This crate's error-related code, generated by `error-chain`.
mod errors {
    // Create the Error, ErrorKind, ResultExt, and Result types
    error_chain!{}
}

pub use errors::*;

/// Main entry point for the `genotype` command.
pub fn run(logger: &mut Logger, options: &GenotypeOptions) -> Result<()> {
    info!(logger, "Running: cnvetti cmd genotype");
    info!(logger, "Options: {:?}", options);

    match options.genotyping {
        GenotypingMethod::ExomeHiddenMarkovModel => gt_xhmm::run_genotyping(logger, options)?,
    }

    // Finally, create index on created output file.
    info!(logger, "Building index for output file...");
    bcf_utils::build_index(logger, &options.output).chain_err(|| "Could not build index")?;
    info!(logger, "All done. Have a nice day!");

    Ok(())
}
